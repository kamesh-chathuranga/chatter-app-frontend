datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  chats         Chat[]    @relation(fields: [chatIds], references: [id])
  chatIds       String[]  @db.ObjectId
  sentMessages  Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  authenticators Authenticator[]
  sentRequests     FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")
}

model Chat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  type         String    @default("direct")
  participants String[]  @db.ObjectId
  users        User[]    @relation(fields: [participants], references: [id])
  messages     Message[]
  createdBy    String    @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  groupName    String?
  groupPhoto   String?
  admins       String[]  @db.ObjectId
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  senderId    String   @db.ObjectId
  sender      User     @relation(fields: [senderId], references: [id])
  chatId      String   @db.ObjectId
  chat        Chat     @relation(fields: [chatId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("sent")
  attachments Json?
  replyTo     String?  @db.ObjectId
  deletedFor  String[] @db.ObjectId
}

model FriendRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId  String   @db.ObjectId
  receiverId String  @db.ObjectId
  status    String   @default("pending") // "pending", "accepted", "rejected"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation(fields: [senderId], references: [id], name: "sentRequests")
  receiver User @relation(fields: [receiverId], references: [id], name: "receivedRequests")

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/**
 * This model is used to store the session information for users.
 * It includes fields for the session token, user ID, expiration date,
 * and timestamps for when the session was created and last updated.
 */
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
